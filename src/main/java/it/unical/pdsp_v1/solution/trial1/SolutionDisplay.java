/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package it.unical.pdsp_v1.solution.trial1;

import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author gezu
 */
public class SolutionDisplay extends javax.swing.JInternalFrame {

    private Random ran = new Random(151190);

    /**
     * Creates new form SolutionDisplay
     */
    public SolutionDisplay() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtVehicles = new javax.swing.JTextField();
        txtOrders = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtList2 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtList3 = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtList4 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        setTitle(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        txtList1.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane6.setViewportView(txtList1);

        txtList2.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane2.setViewportView(txtList2);

        txtList3.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        jScrollPane3.setViewportView(txtList3);

        txtList4.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jScrollPane7.setViewportView(txtList4);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 28, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addGap(349, 349, 349))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                                .addComponent(jScrollPane2)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7)))
                .addContainerGap())
        );

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtOrders, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(187, 187, 187)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtVehicles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrders, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int NoOfOrders = 0;
    int NoOfVehicles = 0;
    int VehicleCap = 0;

//    Vehicle[] Vehicles;
    DefaultListModel model = new DefaultListModel();
    JList list = new JList(model);

    /**
     * print the result on the gui we designed
     *
     * @param Solution_Label
     * @param s
     */
    public void SolutionPrint(String Solution_Label, Solution s) {

//        for (int i = 0; i < customers.length; i++) {
//            model.addElement(customers[i].getName());
//        }
        System.out.println("=========================================================solutions");
        System.out.println(Solution_Label + "\n");

        for (int j = 0; j < NoOfVehicles; j++) {
            if (!s.Vehicles[j].Route.isEmpty()) {
                System.out.print("Vehicle " + j + ":");
                int RoutSize = s.Vehicles[j].Route.size();
                System.out.println("RoutSize = " + RoutSize);
                for (int k = 0; k < RoutSize; k++) {
                    if (k == RoutSize - 1) {
                        model.addElement(String.valueOf(s.Vehicles[j].Route.get(k).NodeId));
                        System.out.println("vehicles---" + s.Vehicles[j].Route.get(k).NodeId);
                    } else {
                        model.addElement(String.valueOf(s.Vehicles[j].Route.get(k).NodeId + "=>"+"P"));
                        txtList1.setModel(model);
                        System.out.println("vehicles===" + s.Vehicles[j].Route.get(k).NodeId);
                    }
                }
                System.out.println();
            }
        }
        System.out.println("\nSolution Cost " + s.Cost + "\n");
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        //Problem Parameters
        NoOfOrders = Integer.valueOf(txtOrders.getText());
        NoOfVehicles = Integer.valueOf(txtVehicles.getText());
        VehicleCap = 50;

        //Depot Coordinates
        int Depot_x = 50;
        int Depot_y = 50;

        //Tabu Parameter
        int TABU_Horizon = 10;

        //Initialise
        //Create Random Orders
        Node[] Nodes = new Node[NoOfOrders + 1];
        Node depot = new Node(Depot_x, Depot_y);

        Nodes[0] = depot;
        for (int i = 1; i <= NoOfOrders; i++) {
            Nodes[i] = new Node(i, //Id ) is reserved for depot
                    ran.nextInt(100), //Random Cordinates
                    ran.nextInt(100),
                    4 + ran.nextInt(7) //Random Demand
            );
        }

        double[][] distanceMatrix = new double[NoOfOrders + 1][NoOfOrders + 1];
        System.out.println("distanceMatrix = " + distanceMatrix);
        double Delta_x, Delta_y;
        for (int i = 0; i <= NoOfOrders; i++) {
            for (int j = i + 1; j <= NoOfOrders; j++) //The table is summetric to the first diagonal
            {                                      //Use this to compute distances in O(n/2)

                Delta_x = (Nodes[i].Node_X - Nodes[j].Node_X);
                Delta_y = (Nodes[i].Node_Y - Nodes[j].Node_Y);

                double distance = Math.sqrt((Delta_x * Delta_x) + (Delta_y * Delta_y));

                distance = Math.round(distance);                //Distance is Casted in Integer
                //distance = Math.round(distance*100.0)/100.0; //Distance in double

                distanceMatrix[i][j] = distance;
                distanceMatrix[j][i] = distance;
            }
        }
        int printMatrix = 0; //If we want to print diastance matrix

        if (printMatrix == 1) {
            for (int i = 0; i <= NoOfOrders; i++) {
                for (int j = 0; j <= NoOfOrders; j++) {
                    System.out.print(distanceMatrix[i][j] + "  ");
                }
                System.out.println("NoOfOrders" + NoOfOrders);
            }
        }
        Draws draw = new Draws();
        //Compute the greedy Solution
//        System.out.println("Attempting to resolve Vehicle Routing Problem (VRP) for " + NoOfOrders
//                + " Customers and " + NoOfVehicles + " Vehicles" + " with " + VehicleCap + " units of capacity\n");
//
        Solution s = new Solution(NoOfOrders, NoOfVehicles, VehicleCap);
//
//        s.GreedySolution(Nodes, distanceMatrix);
//        txtPane.setText(s.SolutionPrint("Solution after Inter-Route Heuristic Neighborhood Search"));

//        s.SolutionPrint("The First Solution");
//        SolutionPrint("The First Solution", s);
//        txtList1.setModel(model);
////        draw.drawRoutes(s, "Greedy_Solution");
//        s.IntraRouteLocalSearch(Nodes, distanceMatrix);
//
//        txtList2.setModel(model);
//        s.SolutionPrint("Solution after Intra-Route Heuristic Neighborhood Search");
//        SolutionPrint("Solution after Intra-Route Heuristic Neighborhood Search", s);
//        txtList3.setModel(model);
////        draw.drawRoutes(s, "Intra-Route");
//        s.GreedySolution(Nodes, distanceMatrix);
        s.InterRouteLocalSearch(Nodes, distanceMatrix);

        s.SolutionPrint("Solution after Inter-Route Heuristic Neighborhood Search");
        SolutionPrint("Solution after Inter-Route Heuristic Neighborhood Search", s);
//        txtList4.setModel(model);
        draw.drawRoutes(s, "Inter-Route");
        s.GreedySolution(Nodes, distanceMatrix);
        s.TabuSearch(TABU_Horizon, distanceMatrix);
        s.SolutionPrint("Solution After Tabu Search");
        SolutionPrint("Solution After Tabu Search", s);
        draw.drawRoutes(s, "TABU_Solution");
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList<String> txtList1;
    private javax.swing.JList<String> txtList2;
    private javax.swing.JList<String> txtList3;
    private javax.swing.JList<String> txtList4;
    private javax.swing.JTextField txtOrders;
    private javax.swing.JTextField txtVehicles;
    // End of variables declaration//GEN-END:variables
}
